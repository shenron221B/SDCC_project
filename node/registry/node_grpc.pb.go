// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.2
// source: node.proto

package registry

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	Node_TransferMoney_FullMethodName       = "/node.Node/TransferMoney"
	Node_GetBalance_FullMethodName          = "/node.Node/GetBalance"
	Node_RequestLoan_FullMethodName         = "/node.Node/RequestLoan"
	Node_VerifyTransaction_FullMethodName   = "/node.Node/VerifyTransaction"
	Node_TransactionReceived_FullMethodName = "/node.Node/TransactionReceived"
	Node_ReceiveResponse_FullMethodName     = "/node.Node/ReceiveResponse"
	Node_RequestApproval_FullMethodName     = "/node.Node/RequestApproval"
	Node_UpdateBalance_FullMethodName       = "/node.Node/UpdateBalance"
	Node_UpdatePeers_FullMethodName         = "/node.Node/UpdatePeers"
	Node_ReceiveMarker_FullMethodName       = "/node.Node/ReceiveMarker"
	Node_AnotherVerification_FullMethodName = "/node.Node/AnotherVerification"
)

// NodeClient is the client API for Node service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NodeClient interface {
	TransferMoney(ctx context.Context, in *TransferRequest, opts ...grpc.CallOption) (*TransferResponse, error)
	GetBalance(ctx context.Context, in *BalanceRequest, opts ...grpc.CallOption) (*BalanceResponse, error)
	RequestLoan(ctx context.Context, in *LoanRequest, opts ...grpc.CallOption) (*LoanResponse, error)
	VerifyTransaction(ctx context.Context, in *TransactionVerificationRequest, opts ...grpc.CallOption) (*TransactionVerificationResponse, error)
	TransactionReceived(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	ReceiveResponse(ctx context.Context, in *TransactionVerificationResponse, opts ...grpc.CallOption) (*Empty, error)
	RequestApproval(ctx context.Context, in *ApprovalRequest, opts ...grpc.CallOption) (*ApprovalResponse, error)
	UpdateBalance(ctx context.Context, in *UpdateBalanceRequest, opts ...grpc.CallOption) (*UpdateBalanceResponse, error)
	UpdatePeers(ctx context.Context, in *NodeListResponse, opts ...grpc.CallOption) (*Empty, error)
	ReceiveMarker(ctx context.Context, in *MarkerMessage, opts ...grpc.CallOption) (*Empty, error)
	AnotherVerification(ctx context.Context, in *TransactionVerificationRequest, opts ...grpc.CallOption) (*TransactionVerificationResponse, error)
}

type nodeClient struct {
	cc grpc.ClientConnInterface
}

func NewNodeClient(cc grpc.ClientConnInterface) NodeClient {
	return &nodeClient{cc}
}

func (c *nodeClient) TransferMoney(ctx context.Context, in *TransferRequest, opts ...grpc.CallOption) (*TransferResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TransferResponse)
	err := c.cc.Invoke(ctx, Node_TransferMoney_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) GetBalance(ctx context.Context, in *BalanceRequest, opts ...grpc.CallOption) (*BalanceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BalanceResponse)
	err := c.cc.Invoke(ctx, Node_GetBalance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) RequestLoan(ctx context.Context, in *LoanRequest, opts ...grpc.CallOption) (*LoanResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoanResponse)
	err := c.cc.Invoke(ctx, Node_RequestLoan_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) VerifyTransaction(ctx context.Context, in *TransactionVerificationRequest, opts ...grpc.CallOption) (*TransactionVerificationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TransactionVerificationResponse)
	err := c.cc.Invoke(ctx, Node_VerifyTransaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) TransactionReceived(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, Node_TransactionReceived_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) ReceiveResponse(ctx context.Context, in *TransactionVerificationResponse, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, Node_ReceiveResponse_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) RequestApproval(ctx context.Context, in *ApprovalRequest, opts ...grpc.CallOption) (*ApprovalResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApprovalResponse)
	err := c.cc.Invoke(ctx, Node_RequestApproval_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) UpdateBalance(ctx context.Context, in *UpdateBalanceRequest, opts ...grpc.CallOption) (*UpdateBalanceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateBalanceResponse)
	err := c.cc.Invoke(ctx, Node_UpdateBalance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) UpdatePeers(ctx context.Context, in *NodeListResponse, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, Node_UpdatePeers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) ReceiveMarker(ctx context.Context, in *MarkerMessage, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, Node_ReceiveMarker_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) AnotherVerification(ctx context.Context, in *TransactionVerificationRequest, opts ...grpc.CallOption) (*TransactionVerificationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TransactionVerificationResponse)
	err := c.cc.Invoke(ctx, Node_AnotherVerification_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NodeServer is the server API for Node service.
// All implementations must embed UnimplementedNodeServer
// for forward compatibility
type NodeServer interface {
	TransferMoney(context.Context, *TransferRequest) (*TransferResponse, error)
	GetBalance(context.Context, *BalanceRequest) (*BalanceResponse, error)
	RequestLoan(context.Context, *LoanRequest) (*LoanResponse, error)
	VerifyTransaction(context.Context, *TransactionVerificationRequest) (*TransactionVerificationResponse, error)
	TransactionReceived(context.Context, *Empty) (*Empty, error)
	ReceiveResponse(context.Context, *TransactionVerificationResponse) (*Empty, error)
	RequestApproval(context.Context, *ApprovalRequest) (*ApprovalResponse, error)
	UpdateBalance(context.Context, *UpdateBalanceRequest) (*UpdateBalanceResponse, error)
	UpdatePeers(context.Context, *NodeListResponse) (*Empty, error)
	ReceiveMarker(context.Context, *MarkerMessage) (*Empty, error)
	AnotherVerification(context.Context, *TransactionVerificationRequest) (*TransactionVerificationResponse, error)
	mustEmbedUnimplementedNodeServer()
}

// UnimplementedNodeServer must be embedded to have forward compatible implementations.
type UnimplementedNodeServer struct {
}

func (UnimplementedNodeServer) TransferMoney(context.Context, *TransferRequest) (*TransferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferMoney not implemented")
}
func (UnimplementedNodeServer) GetBalance(context.Context, *BalanceRequest) (*BalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBalance not implemented")
}
func (UnimplementedNodeServer) RequestLoan(context.Context, *LoanRequest) (*LoanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestLoan not implemented")
}
func (UnimplementedNodeServer) VerifyTransaction(context.Context, *TransactionVerificationRequest) (*TransactionVerificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyTransaction not implemented")
}
func (UnimplementedNodeServer) TransactionReceived(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransactionReceived not implemented")
}
func (UnimplementedNodeServer) ReceiveResponse(context.Context, *TransactionVerificationResponse) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReceiveResponse not implemented")
}
func (UnimplementedNodeServer) RequestApproval(context.Context, *ApprovalRequest) (*ApprovalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestApproval not implemented")
}
func (UnimplementedNodeServer) UpdateBalance(context.Context, *UpdateBalanceRequest) (*UpdateBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBalance not implemented")
}
func (UnimplementedNodeServer) UpdatePeers(context.Context, *NodeListResponse) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePeers not implemented")
}
func (UnimplementedNodeServer) ReceiveMarker(context.Context, *MarkerMessage) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReceiveMarker not implemented")
}
func (UnimplementedNodeServer) AnotherVerification(context.Context, *TransactionVerificationRequest) (*TransactionVerificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AnotherVerification not implemented")
}
func (UnimplementedNodeServer) mustEmbedUnimplementedNodeServer() {}

// UnsafeNodeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NodeServer will
// result in compilation errors.
type UnsafeNodeServer interface {
	mustEmbedUnimplementedNodeServer()
}

func RegisterNodeServer(s grpc.ServiceRegistrar, srv NodeServer) {
	s.RegisterService(&Node_ServiceDesc, srv)
}

func _Node_TransferMoney_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).TransferMoney(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_TransferMoney_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).TransferMoney(ctx, req.(*TransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_GetBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).GetBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_GetBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).GetBalance(ctx, req.(*BalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_RequestLoan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).RequestLoan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_RequestLoan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).RequestLoan(ctx, req.(*LoanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_VerifyTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionVerificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).VerifyTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_VerifyTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).VerifyTransaction(ctx, req.(*TransactionVerificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_TransactionReceived_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).TransactionReceived(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_TransactionReceived_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).TransactionReceived(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_ReceiveResponse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionVerificationResponse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).ReceiveResponse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_ReceiveResponse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).ReceiveResponse(ctx, req.(*TransactionVerificationResponse))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_RequestApproval_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApprovalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).RequestApproval(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_RequestApproval_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).RequestApproval(ctx, req.(*ApprovalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_UpdateBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).UpdateBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_UpdateBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).UpdateBalance(ctx, req.(*UpdateBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_UpdatePeers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeListResponse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).UpdatePeers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_UpdatePeers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).UpdatePeers(ctx, req.(*NodeListResponse))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_ReceiveMarker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarkerMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).ReceiveMarker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_ReceiveMarker_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).ReceiveMarker(ctx, req.(*MarkerMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_AnotherVerification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionVerificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).AnotherVerification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_AnotherVerification_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).AnotherVerification(ctx, req.(*TransactionVerificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Node_ServiceDesc is the grpc.ServiceDesc for Node service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Node_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "node.Node",
	HandlerType: (*NodeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TransferMoney",
			Handler:    _Node_TransferMoney_Handler,
		},
		{
			MethodName: "GetBalance",
			Handler:    _Node_GetBalance_Handler,
		},
		{
			MethodName: "RequestLoan",
			Handler:    _Node_RequestLoan_Handler,
		},
		{
			MethodName: "VerifyTransaction",
			Handler:    _Node_VerifyTransaction_Handler,
		},
		{
			MethodName: "TransactionReceived",
			Handler:    _Node_TransactionReceived_Handler,
		},
		{
			MethodName: "ReceiveResponse",
			Handler:    _Node_ReceiveResponse_Handler,
		},
		{
			MethodName: "RequestApproval",
			Handler:    _Node_RequestApproval_Handler,
		},
		{
			MethodName: "UpdateBalance",
			Handler:    _Node_UpdateBalance_Handler,
		},
		{
			MethodName: "UpdatePeers",
			Handler:    _Node_UpdatePeers_Handler,
		},
		{
			MethodName: "ReceiveMarker",
			Handler:    _Node_ReceiveMarker_Handler,
		},
		{
			MethodName: "AnotherVerification",
			Handler:    _Node_AnotherVerification_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "node.proto",
}
